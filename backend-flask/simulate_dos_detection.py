#!/usr/bin/env python3
"""
Script pour simuler et d√©tecter une attaque DoS en temps r√©el
"""

import json
import time
import psutil
import socket
from datetime import datetime
from pathlib import Path
import sys
import os

# Ajouter le chemin du module app
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.model.ai_model import predict_intrusion
from app.utils.preprocessing import extract_features, normalize_features

class DOSDetector:
    def __init__(self):
        self.data_file = Path(__file__).parent / 'app' / 'data' / 'network_data.json'
        self.dos_threshold = 20  # Nombre de connexions pour d√©clencher une alerte DoS
        self.connection_history = {}  # Historique des connexions par IP
        
    def detect_dos_attack(self, connections):
        """D√©tecte une attaque DoS bas√©e sur le nombre de connexions"""
        ip_connections = {}
        
        # Compter les connexions par IP source
        for conn in connections:
            if conn.laddr and conn.laddr.ip:
                source_ip = conn.laddr.ip
                if source_ip not in ip_connections:
                    ip_connections[source_ip] = 0
                ip_connections[source_ip] += 1
        
        # D√©tecter les IPs avec trop de connexions
        dos_ips = []
        for ip, count in ip_connections.items():
            if count > self.dos_threshold:
                dos_ips.append((ip, count))
                print(f"üö® ATTENTION: IP {ip} a {count} connexions (seuil: {self.dos_threshold})")
        
        return dos_ips
    
    def analyze_connection(self, conn):
        """Analyse une connexion individuelle"""
        try:
            # Extraire les informations de connexion
            source_ip = conn.laddr.ip if conn.laddr else '0.0.0.0'
            dest_ip = conn.raddr.ip if conn.raddr else '0.0.0.0'
            source_port = conn.laddr.port if conn.laddr else 0
            dest_port = conn.raddr.port if conn.raddr else 0
            
            # D√©terminer le protocole
            if hasattr(conn, 'type'):
                if conn.type == socket.SOCK_STREAM:
                    protocol = 'tcp'
                elif conn.type == socket.SOCK_DGRAM:
                    protocol = 'udp'
                else:
                    protocol = 'other'
            else:
                protocol = 'other'
            
            # Pr√©parer les donn√©es pour l'analyse
            connection_data = {
                'source_ip': source_ip,
                'destination_ip': dest_ip,
                'source_port': source_port,
                'dest_port': dest_port,
                'protocol': protocol,
                'status': conn.status if hasattr(conn, 'status') else 'NONE',
                'timestamp': datetime.now().isoformat(),
                'connections_count': 1  # √Ä ajuster selon le contexte
            }
            
            # Analyser avec le mod√®le d'IA
            is_intrusion, attack_type, confidence = predict_intrusion(connection_data)
            
            return {
                'source_ip': source_ip,
                'dest_ip': dest_ip,
                'source_port': source_port,
                'dest_port': dest_port,
                'protocol': protocol,
                'status': conn.status if hasattr(conn, 'status') else 'NONE',
                'timestamp': datetime.now().isoformat(),
                'attackType': attack_type,
                'severity': 'high' if is_intrusion else 'low',
                'confidence': confidence
            }
            
        except Exception as e:
            print(f"Erreur lors de l'analyse de la connexion: {e}")
            return None
    
    def update_network_data(self, new_connections, dos_ips):
        """Met √† jour le fichier de donn√©es r√©seau"""
        try:
            # Lire les donn√©es existantes
            if self.data_file.exists():
                with open(self.data_file, 'r') as f:
                    data = json.load(f)
            else:
                data = {
                    'connections': [],
                    'alerts': [],
                    'stats': {
                        'total_connections': 0,
                        'total_packets': 0,
                        'total_alerts': 0,
                        'active_threats': 0,
                        'blocked_attempts': 0,
                        'system_health': 100
                    }
                }
            
            # Ajouter les nouvelles connexions
            data['connections'].extend(new_connections)
            
            # Garder seulement les 100 derni√®res connexions
            data['connections'] = data['connections'][-100:]
            
            # Cr√©er des alertes pour les attaques DoS d√©tect√©es
            for ip, count in dos_ips:
                alert = {
                    'id': len(data['alerts']) + 1,
                    'sourceIp': ip,
                    'destinationIp': 'Multiple',
                    'protocol': 'tcp',
                    'timestamp': datetime.now().isoformat(),
                    'attackType': 'DoS',
                    'severity': 'high',
                    'confidence': min(count / 100.0, 0.95)  # Confiance bas√©e sur le nombre de connexions
                }
                data['alerts'].append(alert)
                print(f"üö® ALERTE DoS cr√©√©e pour {ip} avec {count} connexions")
            
            # Garder seulement les 50 derni√®res alertes
            data['alerts'] = data['alerts'][-50:]
            
            # Mettre √† jour les statistiques
            data['stats']['total_connections'] = len(data['connections'])
            data['stats']['total_alerts'] = len(data['alerts'])
            data['stats']['active_threats'] = len([a for a in data['alerts'] if a['severity'] == 'high'])
            
            # Sauvegarder les donn√©es
            with open(self.data_file, 'w') as f:
                json.dump(data, f, indent=2)
            
            print(f"‚úÖ Donn√©es mises √† jour: {len(new_connections)} connexions, {len(dos_ips)} attaques DoS d√©tect√©es")
            
        except Exception as e:
            print(f"Erreur lors de la mise √† jour des donn√©es: {e}")
    
    def monitor_network(self, duration=60):
        """Surveille le r√©seau pendant une dur√©e donn√©e"""
        print(f"üîç Surveillance du r√©seau pendant {duration} secondes...")
        print("Lancez votre attaque DoS maintenant!")
        
        start_time = time.time()
        scan_count = 0
        
        while time.time() - start_time < duration:
            try:
                # Obtenir les connexions r√©seau
                connections = psutil.net_connections()
                
                # D√©tecter les attaques DoS
                dos_ips = self.detect_dos_attack(connections)
                
                # Analyser les connexions
                new_connections = []
                for conn in connections[:50]:  # Limiter √† 50 connexions pour √©viter la surcharge
                    analyzed = self.analyze_connection(conn)
                    if analyzed:
                        new_connections.append(analyzed)
                
                # Mettre √† jour les donn√©es
                self.update_network_data(new_connections, dos_ips)
                
                scan_count += 1
                print(f"Scan #{scan_count}: {len(connections)} connexions d√©tect√©es")
                
                # Attendre 2 secondes avant le prochain scan
                time.sleep(2)
                
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Surveillance arr√™t√©e par l'utilisateur")
                break
            except Exception as e:
                print(f"Erreur lors de la surveillance: {e}")
                time.sleep(2)
        
        print(f"‚úÖ Surveillance termin√©e apr√®s {scan_count} scans")

def main():
    """Fonction principale"""
    print("üö® D√©tecteur d'attaques DoS")
    print("=" * 40)
    
    detector = DOSDetector()
    
    # D√©marrer la surveillance
    detector.monitor_network(duration=120)  # 2 minutes
    
    print("\nüìä R√©sum√©:")
    print("V√©rifiez le fichier network_data.json pour voir les alertes g√©n√©r√©es")
    print("Le frontend devrait maintenant afficher les alertes DoS")

if __name__ == "__main__":
    main() 