#!/usr/bin/env python3
"""
Script de test pour v√©rifier le fonctionnement du syst√®me de d√©tection d'intrusions.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.model.ai_model import predict_intrusion, get_model
from app.utils.preprocessing import extract_features, normalize_features
import json

def test_model_loading():
    """Teste le chargement du mod√®le"""
    print("=== Test de chargement du mod√®le ===")
    try:
        model = get_model()
        print("‚úÖ Mod√®le charg√© avec succ√®s")
        print(f"   Input shape: {model.input_shape}")
        print(f"   Output shape: {model.model.output_shape}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        return False

def test_feature_extraction():
    """Teste l'extraction des features"""
    print("\n=== Test d'extraction des features ===")
    
    # Donn√©es de test
    test_data = {
        'source_ip': '192.168.1.100',
        'destination_ip': '10.0.0.5',
        'source_port': 12345,
        'dest_port': 80,
        'protocol': 'tcp',
        'connections_count': 25,
        'bytes_sent': 1000,
        'bytes_received': 500
    }
    
    try:
        features = extract_features(test_data)
        print(f"‚úÖ Features extraites: {len(features)} features")
        print(f"   Premi√®res 10 features: {features[:10]}")
        
        normalized = normalize_features(features)
        print(f"‚úÖ Features normalis√©es: {len(normalized)} features")
        print(f"   Premi√®res 10 features normalis√©es: {normalized[:10]}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction des features: {e}")
        return False

def test_prediction():
    """Teste la pr√©diction"""
    print("\n=== Test de pr√©diction ===")
    
    # Donn√©es de test normales
    normal_data = {
        'source_ip': '192.168.1.100',
        'destination_ip': '10.0.0.5',
        'source_port': 12345,
        'dest_port': 80,
        'protocol': 'tcp',
        'connections_count': 2,
        'bytes_sent': 100,
        'bytes_received': 50
    }
    
    # Donn√©es de test suspectes (DoS)
    dos_data = {
        'source_ip': '192.168.1.100',
        'destination_ip': '10.0.0.5',
        'source_port': 12345,
        'dest_port': 80,
        'protocol': 'tcp',
        'connections_count': 50,
        'bytes_sent': 5000,
        'bytes_received': 0
    }
    
    try:
        # Test avec des donn√©es normales
        is_intrusion, attack_type, confidence = predict_intrusion(normal_data)
        print(f"‚úÖ Pr√©diction normale: intrusion={is_intrusion}, type={attack_type}, confiance={confidence:.2f}")
        
        # Test avec des donn√©es suspectes
        is_intrusion, attack_type, confidence = predict_intrusion(dos_data)
        print(f"‚úÖ Pr√©diction DoS: intrusion={is_intrusion}, type={attack_type}, confiance={confidence:.2f}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la pr√©diction: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

def test_network_scanner():
    """Teste le scanner r√©seau"""
    print("\n=== Test du scanner r√©seau ===")
    
    try:
        from app.utils.network_scanner import NetworkScanner
        scanner = NetworkScanner()
        print("‚úÖ Scanner r√©seau cr√©√© avec succ√®s")
        
        # Test d'une connexion simul√©e
        import psutil
        connections = psutil.net_connections()
        if connections:
            print(f"‚úÖ Connexions r√©seau d√©tect√©es: {len(connections)} connexions")
            return True
        else:
            print("‚ö†Ô∏è Aucune connexion r√©seau d√©tect√©e")
            return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test du scanner: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üîç Test du syst√®me de d√©tection d'intrusions")
    print("=" * 50)
    
    tests = [
        test_model_loading,
        test_feature_extraction,
        test_prediction,
        test_network_scanner
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä R√©sultats: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s! Le syst√®me semble fonctionnel.")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 