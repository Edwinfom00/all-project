#!/usr/bin/env python3
"""
D√©tecteur d'attaques DoS compatible Windows utilisant scapy
"""

import json
import time
import threading
from datetime import datetime
from pathlib import Path
import sys
import os
from collections import defaultdict, deque

# Ajouter le chemin du module app
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

try:
    from scapy.all import *
except ImportError:
    print("‚ùå ERREUR: scapy n'est pas install√©!")
    print("   Installez avec: pip install scapy")
    sys.exit(1)

class WindowsDOSDetector:
    def __init__(self):
        self.data_file = Path(__file__).parent / 'app' / 'data' / 'network_data.json'
        self.dos_threshold = 15  # Seuil plus bas pour Windows
        self.packet_history = defaultdict(lambda: deque(maxlen=50))
        self.alert_cooldown = {}
        self.running = False
        
    def packet_callback(self, packet):
        """Callback appel√© pour chaque paquet captur√©"""
        try:
            if IP in packet and TCP in packet:
                source_ip = packet[IP].src
                dest_ip = packet[IP].dst
                source_port = packet[TCP].sport
                dest_port = packet[TCP].dport
                tcp_flags = packet[TCP].flags
                
                # D√©tecter les paquets SYN (SYN flood)
                if tcp_flags & 0x02:  # SYN flag
                    self.detect_syn_flood(source_ip, dest_ip, source_port, dest_port)
                
                # D√©tecter les attaques sur le port 80 (HTTP)
                if dest_port == 80:
                    self.detect_port_flood(source_ip, dest_ip, dest_port)
                    
        except Exception as e:
            pass  # Ignorer les paquets malform√©s
    
    def detect_syn_flood(self, source_ip, dest_ip, source_port, dest_port):
        """D√©tecte les attaques SYN flood"""
        key = f"{source_ip}:{dest_ip}:{dest_port}"
        
        # Ajouter le paquet √† l'historique
        self.packet_history[key].append({
            'timestamp': time.time(),
            'source_ip': source_ip,
            'dest_ip': dest_ip,
            'source_port': source_port,
            'dest_port': dest_port,
            'type': 'SYN'
        })
        
        # V√©rifier le nombre de paquets SYN r√©cents
        recent_packets = [p for p in self.packet_history[key] 
                         if time.time() - p['timestamp'] < 10]  # 10 secondes
        
        if len(recent_packets) > self.dos_threshold:
            self.create_dos_alert(source_ip, dest_ip, 'SYN Flood', len(recent_packets))
    
    def detect_port_flood(self, source_ip, dest_ip, dest_port):
        """D√©tecte les attaques de flood sur un port sp√©cifique"""
        key = f"{source_ip}:{dest_port}"
        
        # Ajouter le paquet √† l'historique
        self.packet_history[key].append({
            'timestamp': time.time(),
            'source_ip': source_ip,
            'dest_ip': dest_ip,
            'dest_port': dest_port,
            'type': 'PORT_FLOOD'
        })
        
        # V√©rifier le nombre de paquets r√©cents
        recent_packets = [p for p in self.packet_history[key] 
                         if time.time() - p['timestamp'] < 10]  # 10 secondes
        
        if len(recent_packets) > self.dos_threshold:
            self.create_dos_alert(source_ip, dest_ip, 'Port Flood', len(recent_packets))
    
    def create_dos_alert(self, source_ip, dest_ip, attack_type, packet_count):
        """Cr√©e une alerte DoS"""
        # √âviter les alertes r√©p√©titives
        alert_key = f"{source_ip}:{attack_type}"
        if alert_key in self.alert_cooldown:
            if time.time() - self.alert_cooldown[alert_key] < 30:  # 30 secondes de cooldown
                return
        
        self.alert_cooldown[alert_key] = time.time()
        
        # Cr√©er l'alerte
        alert = {
            'id': int(time.time()),  # ID unique bas√© sur le timestamp
            'sourceIp': source_ip,
            'destinationIp': dest_ip,
            'protocol': 'tcp',
            'timestamp': datetime.now().isoformat(),
            'attackType': attack_type,
            'severity': 'high',
            'confidence': min(packet_count / 100.0, 0.95),
            'packetCount': packet_count
        }
        
        # Sauvegarder l'alerte
        self.save_alert(alert)
        
        print(f"üö® ALERTE {attack_type}: {source_ip} -> {dest_ip} ({packet_count} paquets)")
    
    def save_alert(self, alert):
        """Sauvegarde une alerte dans le fichier de donn√©es"""
        try:
            # Lire les donn√©es existantes
            if self.data_file.exists():
                with open(self.data_file, 'r') as f:
                    data = json.load(f)
            else:
                data = {
                    'connections': [],
                    'alerts': [],
                    'stats': {
                        'total_connections': 0,
                        'total_packets': 0,
                        'total_alerts': 0,
                        'active_threats': 0,
                        'blocked_attempts': 0,
                        'system_health': 100
                    }
                }
            
            # Ajouter l'alerte
            data['alerts'].append(alert)
            
            # Garder seulement les 50 derni√®res alertes
            data['alerts'] = data['alerts'][-50:]
            
            # Mettre √† jour les statistiques
            data['stats']['total_alerts'] = len(data['alerts'])
            data['stats']['active_threats'] = len([a for a in data['alerts'] if a['severity'] == 'high'])
            
            # Sauvegarder
            with open(self.data_file, 'w') as f:
                json.dump(data, f, indent=2)
                
        except Exception as e:
            print(f"Erreur lors de la sauvegarde de l'alerte: {e}")
    
    def start_monitoring(self, duration=300):
        """D√©marre la surveillance des attaques externes"""
        print("üö® D√©tecteur d'attaques DoS Windows")
        print("=" * 50)
        print(f"‚è±Ô∏è  Surveillance pendant {duration} secondes")
        print("üì° Capture des paquets avec scapy")
        print("üéØ D√©tection: SYN Flood, Port Flood")
        print()
        
        self.running = True
        
        try:
            # D√©marrer la capture de paquets
            print("üîç D√©marrage de la capture de paquets...")
            print("Lancez votre attaque DoS maintenant!")
            
            # Capturer les paquets TCP
            sniff(
                prn=self.packet_callback,
                filter="tcp",
                store=0,
                timeout=duration
            )
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Surveillance arr√™t√©e par l'utilisateur")
        except Exception as e:
            print(f"Erreur lors de la capture: {e}")
        finally:
            self.running = False
            print("\n‚úÖ Surveillance termin√©e")

def main():
    """Fonction principale"""
    detector = WindowsDOSDetector()
    
    try:
        detector.start_monitoring(duration=300)  # 5 minutes
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Surveillance arr√™t√©e par l'utilisateur")

if __name__ == "__main__":
    main() 