#!/usr/bin/env python3
"""
Version compl√®te qui d√©tecte les attaques internes ET externes
"""

from app import create_app
import logging
from app.routes.settings import settings_bp
from app.routes.rules import rules_bp
import threading
import time
import os
import sys
from pathlib import Path

# Ajouter le chemin du module app
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CompleteIDSSystem:
    """Syst√®me IDS complet qui d√©tecte tout"""
    
    def __init__(self):
        self.running = False
        self.threads = []
        
    def start_network_scanner(self):
        """D√©marre le scanner r√©seau (connexions √©tablies)"""
        try:
            from app.utils import network_scanner
            
            def scanner_loop():
                try:
                    while self.running:
                        try:
                            network_scanner.scanner._run_scanner()
                            time.sleep(5)
                        except Exception as e:
                            logger.error(f"Erreur scan r√©seau: {e}")
                            time.sleep(5)
                except Exception as e:
                    logger.error(f"Erreur scanner r√©seau: {e}")
            
            scanner_thread = threading.Thread(target=scanner_loop, daemon=True)
            scanner_thread.start()
            self.threads.append(scanner_thread)
            logger.info("üöÄ Scanner r√©seau (connexions √©tablies) d√©marr√©")
            
        except Exception as e:
            logger.error(f"Erreur d√©marrage scanner: {e}")
    
    def start_external_detector(self):
        """D√©marre le d√©tecteur d'attaques externes (paquets bruts)"""
        try:
            from external_dos_detector import ExternalDOSDetector
            
            detector = ExternalDOSDetector()
            detector.running = True
            
            def capture_loop():
                try:
                    logger.info("üöÄ D√©tecteur d'attaques externes d√©marr√©")
                    detector.capture_packets()
                except Exception as e:
                    logger.error(f"Erreur capture externe: {e}")
            
            capture_thread = threading.Thread(target=capture_loop, daemon=True)
            capture_thread.start()
            self.threads.append(capture_thread)
            logger.info("üöÄ D√©tecteur d'attaques externes (paquets bruts) d√©marr√©")
            
        except Exception as e:
            logger.warning(f"D√©tecteur externe non disponible: {e}")
    
    def start_windows_detector(self):
        """D√©marre le d√©tecteur Windows (avec scapy)"""
        try:
            from windows_dos_detector import WindowsDOSDetector
            
            detector = WindowsDOSDetector()
            detector.running = True
            
            def capture_loop():
                try:
                    logger.info("üöÄ D√©tecteur Windows d√©marr√©")
                    detector.start_monitoring(duration=3600)
                except Exception as e:
                    logger.error(f"Erreur capture Windows: {e}")
            
            capture_thread = threading.Thread(target=capture_loop, daemon=True)
            capture_thread.start()
            self.threads.append(capture_thread)
            logger.info("üöÄ D√©tecteur Windows (scapy) d√©marr√©")
            
        except Exception as e:
            logger.warning(f"D√©tecteur Windows non disponible: {e}")
    
    def start_alert_monitor(self):
        """D√©marre le moniteur d'alertes"""
        try:
            from check_alerts import check_alerts
            
            def monitor_loop():
                try:
                    logger.info("üöÄ Moniteur d'alertes d√©marr√©")
                    check_alerts()
                except Exception as e:
                    logger.error(f"Erreur moniteur d'alertes: {e}")
            
            monitor_thread = threading.Thread(target=monitor_loop, daemon=True)
            monitor_thread.start()
            self.threads.append(monitor_thread)
            logger.info("üöÄ Moniteur d'alertes d√©marr√©")
            
        except Exception as e:
            logger.warning(f"Moniteur d'alertes non disponible: {e}")
    
    def detect_os_and_start_services(self):
        """D√©tecte l'OS et d√©marre les services appropri√©s"""
        import platform
        
        os_name = platform.system().lower()
        logger.info(f"üñ•Ô∏è Syst√®me d√©tect√©: {os_name}")
        
        # Services communs
        self.start_network_scanner()
        self.start_alert_monitor()
        
        # Services sp√©cifiques √† l'OS
        if os_name in ['linux', 'darwin']:
            # Linux/Mac - D√©marrer le d√©tecteur externe
            self.start_external_detector()
        elif os_name == 'windows':
            # Windows - D√©marrer le d√©tecteur Windows
            self.start_windows_detector()
        else:
            logger.warning(f"OS non reconnu: {os_name}, services de base seulement")
    
    def start_all_services(self):
        """D√©marre tous les services de d√©tection"""
        logger.info("üöÄ D√©marrage du syst√®me IDS COMPLET...")
        logger.info("=" * 60)
        logger.info("üîç D√©tection: Connexions √©tablies + Paquets externes")
        logger.info("üéØ Attaques: DoS, SYN Flood, Port Flood")
        logger.info("=" * 60)
        
        self.running = True
        
        # D√©marrer tous les services
        self.detect_os_and_start_services()
        
        # Attendre que tous les threads d√©marrent
        time.sleep(3)
        
        logger.info("‚úÖ Tous les services de d√©tection sont d√©marr√©s!")
        logger.info("üì° Le syst√®me d√©tecte maintenant:")
        logger.info("   - Connexions √©tablies (127.0.0.1, 0.0.0.0)")
        logger.info("   - Paquets externes (votre attaque Kali)")
        logger.info("üåê Frontend: http://localhost:3000")
        logger.info("üîß API: http://localhost:5000")
        logger.info("=" * 60)
    
    def stop_all_services(self):
        """Arr√™te tous les services"""
        logger.info("üõë Arr√™t du syst√®me IDS...")
        self.running = False
        
        for thread in self.threads:
            if thread.is_alive():
                thread.join(timeout=5)
        
        logger.info("‚úÖ Tous les services arr√™t√©s")

def main():
    """Fonction principale"""
    # Cr√©er l'application Flask
    app = create_app()
    app.register_blueprint(settings_bp)
    app.register_blueprint(rules_bp)
    
    # Cr√©er le syst√®me IDS
    ids_system = CompleteIDSSystem()
    
    try:
        # D√©marrer tous les services de d√©tection
        ids_system.start_all_services()
        
        # Lancer le serveur Flask
        logger.info("üåê D√©marrage du serveur Flask...")
        app.run(host="0.0.0.0", port=5000, debug=False)
        
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è Arr√™t du syst√®me...")
        ids_system.stop_all_services()
    except Exception as e:
        logger.error(f"Erreur syst√®me: {e}")
        ids_system.stop_all_services()

if __name__ == "__main__":
    main() 